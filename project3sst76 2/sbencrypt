#!/usr/bin/python
import sys

if(len(sys.argv) == 4):
    password = sys.argv[1]
    pfile = sys.argv[2]
    cfile = sys.argv[3]
else:
    print("usage: ./scrypt [-d] password plaintextfile ciphertextfile")
    sys.exit(3)

try:
    with open(pfile) as f:
        plaintext= f.read()
except:
    print("./sbencrypt: cannot open plaintext file for reading " + '"' + pfile + '"')
    sys.exit(3)

arr = []
cbc = []
blocksize = 16
startIndex = 0
endIndex = 15
currentBlock = []
lastBlock = []
iv = []

def lcg ():
    a = 1103515245
    c = 12345
    m = 256
    global rand
    rand = (a*rand + c) % m
    return rand

def sdbm(password):
    hash = 0
    for chr in password:
        hash = ord(chr) + (hash << 6) + (hash << 16) - hash
    return hash

def swap(list, pos1, pos2):
    list[pos1], list[pos2] = list[pos2], list[pos1]
    return list

def padding(plaintext):
    padsize = len(plaintext) % 16
    lastindex = len(plaintext)
    padlength = 16 - padsize
    x = lastindex
    while (x < (lastindex + padlength)):
        arr.append(chr(padlength))
        x = x + 1

def cipherBlockSwap(current, keystream):
    for i in range(len(current)):
        binary = keystream[i]
        binarynum = format(binary, '08b')
        first = int(binarynum[0:4], 2)
        second = int(binarynum[4:8], 2)
        array1= swap(array1,second,first)

def cipherchaining(current, keystream):
    tempblock = []
    for i in range(blocksize):
        xor = keystream[i] ^ ord(current[i])
        tempblock.append(xor)
    return tempblock

def keystreamer():
    keystream = []
    for i in range(blocksize):
        keystream.append(lcg())
    return keystream

def shuffle(current,keystream):
    for i in range(blocksize):
        binary = keystream[i]
        binarynum = format(binary, '08b')
        first = int(binarynum[0:4], 2)
        second = int(binarynum[4:8], 2)
        current = swap(current,second,first)
    return current

def lastXOR(array, keystream):
    tester = ''
    tempArray = []
    for i in range(blocksize):
        xor = keystream[i] ^ array[i]
        tempArray.append(xor)
        tester = tester + chr(xor)
    return tester, tempArray
#Start
rand = sdbm(password)
print("using seed=" + str(rand) + " from password=" + '"' + password + '"')

for i in range(blocksize):
    iv.append(lcg())

for x in plaintext:
    arr.append(x)
padding(plaintext)
numBlocks = len(arr)/16 
firstblock = True
counter = 0
endString = ''

while(numBlocks != 0):
    for x in arr[startIndex:endIndex + 1]:
        currentBlock.append(x)
    startIndex = endIndex + 1
    endIndex = endIndex + 16
    if(firstblock == True):
        temp = cipherchaining(currentBlock, iv)
        keystream = keystreamer()
        temp = shuffle(temp, keystream)
        result = lastXOR(temp, keystream)
        endString = endString + result[0]
        lastBlock = result[1]
        firstblock = False
    else:
        temp = cipherchaining(currentBlock, lastBlock)
        keystream = keystreamer()
        temp = shuffle(temp, keystream)
        result = lastXOR(temp, keystream)
        endString = endString + result[0]
        lastBlock = result[1]
    currentBlock =[]
    numBlocks = numBlocks - 1



w = open(cfile,"w+")
n = w.write(endString)
w.close()

#int(binarynum[0:4], 2)




